// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Преподаватели
model Teacher {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  department String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  subjects Subject[]
  files    File[]
  schedules Schedule[] // Новое: расписание преподавателя

  @@map("teachers")
}

// Студенты
model Student {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  studentId  String   @unique @map("student_id")
  groupName  String?  @map("group_name")
  faculty    String?
  startDate  DateTime @map("start_date") // Дата начала обучения
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Связи
  grades             Grade[]
  studentAssignments StudentAssignment[]
  notes              Note[]
  statistics         Statistic[]

  @@map("students")
}

// Семестры и их сроки
model Semester {
  id          String   @id @default(cuid())
  number      Int      // Номер семестра (1, 2, 3, 4, 5, 6, 7, 8, 9)
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  isActive    Boolean  @default(false) @map("is_active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("semesters")
}

// Предметы
model Subject {
  id          String   @id @default(cuid())
  name        String
  credits     Int
  semester    Int
  teacherId   String?  @map("teacher_id")
  description String?
  
  // Новые поля для оценок
  sredniyTek1 Int?     @map("sredniy_tek_1") // Ср.тек. 11
  sredniyTek2 Int?     @map("sredniy_tek_2") // Ср.тек. 22
  rk1         Int?     @map("rk_1")           // РК 1
  rk2         Int?     @map("rk_2")           // РК 2
  exam        Int?     @map("exam")           // Экз.
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  teacher     Teacher?           @relation(fields: [teacherId], references: [id])
  grades      Grade[]
  assignments Assignment[]
  schedules   Schedule[]
  files       File[]
  notes       Note[]
  statistics  Statistic[]

  @@map("subjects")
}

// Типы оценок
model GradeType {
  id          String   @id @default(cuid())
  name        String   @unique // "Ср.тек. 11", "РК 1", "Экз."
  description String?
  createdAt   DateTime @default(now())

  // Связи
  grades Grade[]

  @@map("grade_types")
}

// Оценки
model Grade {
  id         String    @id @default(cuid())
  studentId  String    @map("student_id")
  subjectId  String    @map("subject_id")
  gradeTypeId String   @map("grade_type_id")
  value      Int
  maxValue   Int       @default(100) @map("max_value")
  date       DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Связи
  student   Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject   Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  gradeType GradeType @relation(fields: [gradeTypeId], references: [id])

  @@map("grades")
}

// Задания
model Assignment {
  id          String   @id @default(cuid())
  subjectId   String   @map("subject_id")
  title       String
  description String?
  dueDate     DateTime @map("due_date")
  maxGrade    Int      @default(100) @map("max_grade")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  subject           Subject            @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  studentAssignments StudentAssignment[]

  @@map("assignments")
}

// Задания студентов
model StudentAssignment {
  id           String    @id @default(cuid())
  studentId    String    @map("student_id")
  assignmentId String    @map("assignment_id")
  grade        Int?
  status       String    @default("pending") // pending, completed, overdue
  submittedAt  DateTime? @map("submitted_at")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Связи
  student    Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  assignment Assignment  @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@map("student_assignments")
}

// Расписание
model Schedule {
  id         String   @id @default(cuid())
  subjectId  String   @map("subject_id")
  groupName  String   @map("group_name") // Новое поле: группа
  teacherId  String?  @map("teacher_id") // Преподаватель (опционально)
  dayOfWeek  Int      @map("day_of_week") // 1=понедельник, 2=вторник, etc.
  startTime  String   @map("start_time")
  endTime    String   @map("end_time")
  room       String?
  lessonType String   @map("lesson_type") // lecture, practice, lab
  date       DateTime @map("date") // Новое поле: дата проведения пары
  createdAt  DateTime @default(now())

  // Связи
  subject    Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher    Teacher? @relation(fields: [teacherId], references: [id])

  @@map("schedules")
}

// Файлы
model File {
  id         String   @id @default(cuid())
  subjectId  String   @map("subject_id")
  name       String
  filePath   String   @map("file_path")
  fileSize   BigInt   @map("file_size")
  mimeType   String?  @map("mime_type")
  uploadedBy String?  @map("uploaded_by")
  createdAt  DateTime @default(now())

  // Связи
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher Teacher? @relation(fields: [uploadedBy], references: [id])

  @@map("files")
}

// Заметки
model Note {
  id         String   @id @default(cuid())
  studentId  String   @map("student_id")
  subjectId  String   @map("subject_id")
  title      String
  content    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Связи
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@map("notes")
}

// Статистика
model Statistic {
  id                    String   @id @default(cuid())
  studentId             String   @map("student_id")
  subjectId             String   @map("subject_id")
  averageGrade          Decimal? @map("average_grade") @db.Decimal(5,2)
  totalAssignments      Int      @default(0) @map("total_assignments")
  completedAssignments  Int      @default(0) @map("completed_assignments")
  missedClasses         Int      @default(0) @map("missed_classes")
  studyHours            Int      @default(0) @map("study_hours")
  progressPercentage    Int      @default(0) @map("progress_percentage")
  attendancePercentage  Int      @default(0) @map("attendance_percentage")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Связи
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@map("statistics")
}
