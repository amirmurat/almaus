const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

function addDays(date, days) {
  const d = new Date(date);
  d.setDate(d.getDate() + days);
  return d;
}

async function seedSchedule() {
  try {
    console.log('üå± Seeding schedule for IT-23-1, 3 —Å–µ–º–µ—Å—Ç—Ä (–ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å –ø–æ –¥–∞—Ç–∞–º)...');

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
    await prisma.schedule.deleteMany({ where: { groupName: 'IT-23-1' } });

    // –ü–æ–ª—É—á–∏—Ç—å 3 —Å–µ–º–µ—Å—Ç—Ä
    const semester = await prisma.semester.findFirst({ where: { number: 3 } });
    if (!semester) throw new Error('–ù–µ—Ç 3 —Å–µ–º–µ—Å—Ç—Ä–∞!');
    const startDate = new Date(semester.startDate);
    const endDate = new Date(semester.endDate);

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã 3 —Å–µ–º–µ—Å—Ç—Ä–∞
    const subjects = await prisma.subject.findMany({ where: { semester: 3 } });
    if (!subjects.length) throw new Error('–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è 3 —Å–µ–º–µ—Å—Ç—Ä–∞!');

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    const teachers = await prisma.teacher.findMany();
    if (!teachers.length) throw new Error('–ù–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π!');

    // –í—Ä–µ–º—è –ø–∞—Ä (–ø—Ä–∏–º–µ—Ä)
    const times = [
      { start: '09:00', end: '10:30' },
      { start: '10:40', end: '12:10' },
      { start: '12:40', end: '14:10' },
      { start: '14:20', end: '15:50' },
      { start: '16:00', end: '17:30' },
    ];

    // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å –≤ —Å–µ–º–µ—Å—Ç—Ä–µ
    const msInWeek = 7 * 24 * 60 * 60 * 1000;
    const totalWeeks = Math.floor((endDate - startDate) / msInWeek);
    const weeksToGenerate = Math.max(1, totalWeeks - 3); // –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 –Ω–µ–¥–µ–ª—å

    for (let week = 0; week < weeksToGenerate; week++) {
      for (let day = 1; day <= 5; day++) { // –ü–Ω‚Äì–ü—Ç
        const subject = subjects[(day - 1) % subjects.length];
        const teacher = teachers[(day - 1) % teachers.length];
        const time = times[(day - 1) % times.length];
        
        // –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞
        const firstMonday = new Date(startDate);
        const dayOfWeek = firstMonday.getDay(); // 0=–≤—Å, 1=–ø–Ω, ..., 6=—Å–±
        const daysToAdd = dayOfWeek === 0 ? 1 : (8 - dayOfWeek); // –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
        firstMonday.setDate(firstMonday.getDate() + daysToAdd);
        
        // –î–∞—Ç–∞: –ø–µ—Ä–≤—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ + week*7 + (day-1)
        const date = addDays(firstMonday, week * 7 + (day - 1));
        
        await prisma.schedule.create({
          data: {
            groupName: 'IT-23-1',
            subjectId: subject.id,
            teacherId: teacher.id,
            dayOfWeek: day,
            startTime: time.start,
            endTime: time.end,
            room: `${101 + day}`,
            lessonType: 'lecture',
            date: date,
          }
        });
      }
    }

    console.log('‚úÖ Schedule seeded for all –Ω–µ–¥–µ–ª–∏ 3 —Å–µ–º–µ—Å—Ç—Ä–∞!');
  } catch (error) {
    console.error('‚ùå Error seeding schedule:', error);
  } finally {
    await prisma.$disconnect();
  }
}

seedSchedule(); 