const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function testScheduleAPI() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã IT-23-1
    const schedules = await prisma.schedule.findMany({
      where: { groupName: 'IT-23-1' },
      include: {
        subject: true,
        teacher: true
      }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${schedules.length} –∑–∞–ø–∏—Å–µ–π`);
    
    if (schedules.length > 0) {
      console.log('\nüìÖ –ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π —Å –¥–∞—Ç–∞–º–∏:');
      schedules.slice(0, 5).forEach((s, i) => {
        console.log(`${i+1}. ${s.date} - ${s.subject.name} (${s.startTime}-${s.endTime})`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç
      console.log('\nüìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç:');
      schedules.slice(0, 3).forEach(s => {
        const dateStr = s.date.toISOString().slice(0, 10);
        console.log(`–ò—Å—Ö–æ–¥–Ω–∞—è: ${s.date}`);
        console.log(`ISO slice: ${dateStr}`);
        console.log(`---`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã
      const uniqueDates = [...new Set(schedules.map(s => s.date.toISOString().slice(0, 10)))];
      console.log(`\nüìÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç: ${uniqueDates.length}`);
      console.log('–ü–µ—Ä–≤—ã–µ 10 –¥–∞—Ç:', uniqueDates.slice(0, 10));
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testScheduleAPI(); 